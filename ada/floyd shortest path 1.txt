
def initialise(V):
	global dis, Next

	for i in range(V):
		for j in range(V):
			dis[i][j] = graph[i][j]

			if (graph[i][j] == INF):
				Next[i][j] = -1
			else:
				Next[i][j] = j
def constructPath(u, v):
	global graph, Next

	if (Next[u][v] == -1):
		return {}

	path = [u]
	while (u != v):
		u = Next[u][v]
		path.append(u)

	return path

def floydWarshall(V):
	global dist, Next
	for k in range(V):
		for i in range(V):
			for j in range(V):

				if (dis[i][k] == INF or dis[k][j] == INF):
					continue
				if (dis[i][j] > dis[i][k] + dis[k][j]):
					dis[i][j] = dis[i][k] + dis[k][j]
					Next[i][j] = Next[i][k]

def printPath(path):
	n = len(path)
	for i in range(n - 1):
		print(path[i], end=" -> ")
	print (path[n - 1])



MAXM,INF = 100,10**7
dis = [[-1 for i in range(MAXM)] for i in range(MAXM)]
Next = [[-1 for i in range(MAXM)] for i in range(MAXM)]

V = 4
graph = [ [ 0, 3, INF, 7 ],
	[ 8, 0, 2, INF ],
	[ 5, INF, 0, 1 ],
	[ 2, INF, INF, 0 ] ]

initialise(V)

floydWarshall(V)
path = []
print("Shortest path from 1 to 3: ", end = "")
path = constructPath(1, 3)
printPath(path)


